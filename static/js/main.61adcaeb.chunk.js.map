{"version":3,"sources":["../../src/Copy/CopyContext.tsx","../../src/Copy/CopyProvider.tsx","../../src/WrappedCopyContextProvider.tsx","../../src/Copy/useCopiedContext.tsx","../../src/WrappedElement.tsx","App.tsx","index.tsx"],"names":["CopyContext","React","CopyProvider","children","useState","copiedText","setCopiedText","value","WrappedCopyContextProvider","useCopiedContext","useContext","WrappedElement","wrappedTextRef","ref","onClick","textToCopy","navigator","copyTextToClipboardAndContext","App","MyComponent","context","console","log","ReactDOM","render","document","getElementById"],"mappings":"sOAMMA,EAAcC,kBAApB,ICHMC,EAA0B,SAAC,G,IAAEC,a,EACGC,mBAAQ,IAArCC,OAAYC,OAEnB,OACE,kBAACN,EAAD,UAAsBO,MAAO,CAAEF,WAAF,EAAcC,kBAD7C,ICFWE,EAA8C,SAAC,G,IAAEL,aAC5D,OAAOF,+BAAP,ICAWQ,EAAmB,WAE9B,OADgBC,qBAAhB,ICFWC,EAAkC,SAAC,G,IAAER,aAC1CS,EAAiBX,iBAAvB,MACQK,EAAkBG,IAAlBH,cASR,OACE,+BAAKO,IAAKD,EAAgBE,QAAS,kBATC,WAAH,IACjC,IAAMC,EACHH,WAA0BA,UAA3B,aADF,G,gBAEIG,E,uBACIC,mDACNV,GAAiBA,EAAjBA,M,mEAL+B,mCASQW,KAD3C,ICAaC,EARH,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAOAC,EAAc,WAClB,IAAMC,EAAUX,IAGhB,OAFAY,QAAQC,IAAIF,GAGV,6BACE,kBAAC,EAAD,gBCjBNG,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.61adcaeb.chunk.js","sourcesContent":["import React from 'react'\n\ntype ContextProps = {\n  copiedText: string\n  setCopiedText: (value: string) => void\n}\nconst CopyContext = React.createContext<Partial<ContextProps>>({})\n\nexport default CopyContext\n","import React, { useState, FC } from 'react'\nimport CopyContext from './CopyContext'\ninterface Props {}\nconst CopyProvider: FC<Props> = ({ children }) => {\n  const [copiedText, setCopiedText] = useState<string>('')\n\n  return (\n    <CopyContext.Provider value={{ copiedText, setCopiedText }}>\n      {children}\n    </CopyContext.Provider>\n  )\n}\n\nexport { CopyProvider }\n","import * as React from 'react'\nimport { CopyProvider } from './Copy/CopyProvider'\ninterface Props {}\n\nexport const WrappedCopyContextProvider: React.FC<Props> = ({ children }) => {\n  return <CopyProvider>{children}</CopyProvider>\n}\n","import { useContext } from 'react'\nimport CopyContext from './CopyContext'\n/**\n * All This does is Return Context To The ?Uer\n */\nexport const useCopiedContext = () => {\n  const context = useContext(CopyContext)\n  return context\n}\n","import * as React from 'react'\nimport { useCopiedContext } from './Copy/useCopiedContext'\ninterface Props {}\n\nexport const WrappedElement: React.FC<Props> = ({ children }) => {\n  const wrappedTextRef = React.useRef<HTMLDivElement>(null)\n  const { setCopiedText } = useCopiedContext()\n  const copyTextToClipboardAndContext = async () => {\n    const textToCopy: string =\n      (wrappedTextRef.current && wrappedTextRef.current.textContent) || ''\n    if (textToCopy) {\n      await navigator.clipboard.writeText(textToCopy) // TODO USER NOTIFICATIONS LAY IN THIS PROMISE\n      setCopiedText && setCopiedText(textToCopy)\n    }\n  }\n  return (\n    <div ref={wrappedTextRef} onClick={() => copyTextToClipboardAndContext()}>\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n\nimport {\n  WrappedElement,\n  WrappedCopyContextProvider,\n  useCopiedContext\n} from 'wrappedcopy'\nconst App = () => {\n  return (\n    <WrappedCopyContextProvider>\n      <MyComponent />\n    </WrappedCopyContextProvider>\n  )\n}\n\nexport default App\n\nconst MyComponent = () => {\n  const context = useCopiedContext()\n  console.log(context)\n\n  return (\n    <div>\n      <WrappedElement>Hello</WrappedElement>\n    </div>\n  )\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}